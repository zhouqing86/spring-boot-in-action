{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "An example template",
  "Parameters": {
    "InstanceAMI": {
      "Type": "AWS::EC2::Image::Id",
      "Default": "ami-ee7bca8d"
    },
    "InstanceType": {
      "Type": "String",
      "Description": "Instance Type",
      "Default": "t2.micro"
    },
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Default": "vpc-2e87e74a"
    },
    "Subnet": {
      "Type": "String",
      "Default": "subnet-e956069f"
    },
    "IAMPath": {
      "Type": "String",
      "Default": "/spring-boot-in-action/"
    },
    "EnvironmentName": {
      "Type": "String",
      "Default": "staging"
    },
    "ArtifactLocation": {
      "Type": "String",
      "Default": "s3://aicaideren/artifacts/spring-boot-in-action-deploy.tar.gz"
    }
  },
  "Resources": {
    "SSHSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Permit inbound SSH",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "VpcId": { "Ref": "VpcId" }
      }
    },
    "HTTPSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Permit inbound HTTP",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "VpcId": { "Ref": "VpcId" }
      }
    },
    "AppServerRole": {
      "Type": "AWS::IAM::Role",
      "Properties" : {
        "Path": { "Ref": "IAMPath" },
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Policies": [ {
          "PolicyName": "AppRolePolicy",
          "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [
              { "Effect": "Allow", "Resource": "*", "Action": "cloudformation:DescribeStackResource" },
              { "Effect": "Allow", "Resource": "*", "Action": "cloudwatch:PutMetricData" },
              { "Effect": "Allow", "Resource": "*", "Action": "s3:Get*" },
              { "Effect": "Allow", "Resource": "*", "Action": "s3:Put*" },
              { "Effect": "Allow", "Resource": "*", "Action": "s3:List*" }
            ]
          }
        } ]
      }
    },
    "AppServerInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path": { "Ref": "IAMPath" },
        "Roles": [ {  "Ref": "AppServerRole" } ]
      }
    },
    "PlatformLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init":{
          "configSets" : {
            "default": ["copyAnsibleScript", "allowLocalSSH", "runAnsible"]
          },
          "copyAnsibleScript" : {
            "packages": {
              "apt": {
                "awscli": []
              }
            },
            "commands": {
              "1-copy-artifacts": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/usr/bin/aws s3 cp",
                      " ",
                      { "Ref": "ArtifactLocation" },
                      " ",
                      "/tmp/artifacts-ansible.tar.gz"
                    ]
                  ]
                }
              },
              "2-uncompress": {
                "command": "tar zxvf /tmp/artifacts-ansible.tar.gz -C /tmp"
              }
            }
          },
          "allowLocalSSH": {
            "commands": {
              "1-gen-ssh": {
                "command": "ssh-keygen -f id_rsa -t rsa -N ''",
                "cwd": "~/.ssh"
              },
              "2-authority": {
                "command": "cat id_rsa.pub >> authorized_keys",
                "cwd": "~/.ssh"
              },
              "3-know-hosts": {
                "command": "ssh-keyscan -H localhost >> known_hosts",
                "cwd": "~/.ssh"
              }
            }
          },
          "runAnsible": {
            "packages": {
              "apt": {
                "ansible": []
              }
            },
            "groups": {
              "app": {}
            },
            "users": {
              "aicaideren": {
                "groups": ["app"],
                "homeDir": "/home/aicaideren"
              }
            },
            "commands": {
              "1-change-login-shell": {
                "command": "chsh -s /bin/bash aicaideren"
              },
              "2-create-home": {
                "command": "mkhomedir_helper aicaideren"
              },
              "3-create-inventory": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo '[",
                      { "Ref": "EnvironmentName" },
                      "]\nlocalhost' > /tmp/deploy/inventory.ini\n"
                    ]
                  ]
                }
              },
              "4-run-ansible": {
                "command": "/usr/bin/ansible-playbook -i inventory.ini playbook.yml",
                "cwd": "/tmp/deploy"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Ref": "InstanceAMI"
        },
        "IamInstanceProfile": { "Ref": "AppServerInstanceProfile" },
        "KeyName": "MyAWSInstanceKey",
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "set -x\n",
                "apt-get update\n",
                "apt-get -y install python-setuptools\n",
                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "/usr/local/bin/cfn-init -v",
                " -s ", { "Ref" : "AWS::StackName" },
                " -r PlatformLaunchConfiguration",
                " -c default",
                " --region=", { "Ref" : "AWS::Region" }, "\n",
                ""
              ]
            ]
          }
        },
        "SecurityGroups": [
          { "Ref": "SSHSecurityGroup" },
          { "Ref": "HTTPSecurityGroup" }
        ]
      }
    },
    "PlatformScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": ["ap-southeast-1a", "ap-southeast-1b"],
        "LaunchConfigurationName": { "Ref": "PlatformLaunchConfiguration" },
        "MaxSize": "1",
        "MinSize": "0",
        "DesiredCapacity": "1",
        "Tags": [
          {
            "Key": "Name",
            "Value": "spring-boot-in-action",
            "PropagateAtLaunch": true
          }
        ]
      }
    },
    "ScheduledActionUp": {
      "Type": "AWS::AutoScaling::ScheduledAction",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "PlatformScalingGroup" },
        "MaxSize": "1",
        "MinSize": "1",
        "Recurrence": "0 19 * * *"
      }
    },
    "ScheduledActionDown": {
      "Type": "AWS::AutoScaling::ScheduledAction",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "PlatformScalingGroup" },
        "MaxSize": "0",
        "MinSize": "0",
        "Recurrence": "0 8 * * *"
      }
    }
  },
  "Outputs": {
    "AMI": {
      "Description": "The ami that was used",
      "Value": { "Ref": "InstanceAMI" }
    }
  }
}
